# Generated by Django 4.2.3 on 2023-08-10 17:41

import _socket
from django.conf import settings
import django.contrib.sites.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_revision.revision_field
import edc_model.models.fields.duration
import edc_model.models.fields.other_charfield
import edc_model.validators.phone
import edc_model_fields.fields.initials_field
import edc_model_fields.fields.other_charfield
import edc_screening.model_mixins.screening_model_mixin
import edc_sites.model_mixins
import edc_utils
import edc_utils.date
import edc_vitals.models.fields.blood_pressure
import intecomm_group.models.patient_group
import intecomm_screening.model_mixins.patient_call_model_mixin
import intecomm_screening.models.health_talk_log
import intecomm_screening.models.patient_log
import simple_history.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("intecomm_group", "0001_initial"),
        ("intecomm_facility", "0001_initial"),
        ("intecomm_lists", "0001_initial"),
        ("sites", "0002_alter_domain_unique"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PatientLog",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "legal_name",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure full name consists of letters only in upper case separated by single spaces",
                                regex="^(([A-Z]+ )*[A-Z]+)?$",
                            )
                        ],
                        verbose_name="Full name",
                    ),
                ),
                (
                    "familiar_name",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="Should be a name. Do NOT use MR, MRS, MISS, SIR, MADAM and other such titles. (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure name consists of letters only in upper case separated by single spaces",
                                regex="^(([A-Z]+ )*[A-Z]+)?$",
                            )
                        ],
                        verbose_name="By what NAME should we refer to you? (if we speak to you)",
                    ),
                ),
                (
                    "filing_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Auto-populated when form is saved. <BR>This is a sequential-like identifier to label this patient's paper file",
                        max_length=36,
                        unique=True,
                        verbose_name="Filing number",
                    ),
                ),
                (
                    "patient_log_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Auto-populated when form is saved. <BR>You may prefer to use the FILING NUMBER. <BR>This identifier is replaced by the 'screening identifier' if the patient screens for the INTECOMM trial",
                        max_length=36,
                        unique=True,
                        verbose_name="Patient Log Reference",
                    ),
                ),
                (
                    "screening_identifier",
                    models.CharField(
                        default=edc_utils.get_uuid,
                        help_text="Auto populated when screening form is complete",
                        max_length=36,
                        unique=True,
                    ),
                ),
                (
                    "screening_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Auto populated when screening form is complete",
                        null=True,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(
                        default=edc_utils.get_uuid,
                        help_text="Auto populated when consent form is complete",
                        max_length=36,
                        unique=True,
                    ),
                ),
                (
                    "consent_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Auto populated when consent form is complete",
                        null=True,
                    ),
                ),
                (
                    "group_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Auto populated when group is randomized",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "initials",
                    edc_model_fields.fields.initials_field.InitialsField(
                        help_text="Type 2-3 letters, all in uppercase and no spaces",
                        max_length=3,
                        verbose_name="Initials",
                    ),
                ),
                (
                    "gender",
                    models.CharField(choices=[("M", "Male"), ("F", "Female")], max_length=10),
                ),
                (
                    "age_in_years",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(18),
                            django.core.validators.MaxValueValidator(110),
                        ],
                        verbose_name="Age",
                    ),
                ),
                ("report_datetime", models.DateTimeField(default=edc_utils.date.get_utcnow)),
                (
                    "hospital_identifier",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="Must be unique (Encryption: RSA local)",
                        max_length=71,
                        unique=True,
                        verbose_name="Hospital identifier",
                    ),
                ),
                (
                    "last_4_hospital_identifier",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        editable=False,
                        help_text="auto-populated (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        verbose_name="Last 4 digits of hospital_identifier",
                    ),
                ),
                (
                    "contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="If unknown, type 'UNKNOWN' (Encryption: RSA local)",
                        max_length=71,
                        validators=[edc_model.validators.phone.phone_number],
                    ),
                ),
                (
                    "alt_contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[edc_model.validators.phone.phone_number],
                    ),
                ),
                (
                    "last_4_contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        editable=False,
                        help_text="auto-populated (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        verbose_name="Last 4 digits of contact number",
                    ),
                ),
                (
                    "may_contact",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        max_length=15,
                        verbose_name="Has the patient agreed to be contacted prior to consent?",
                    ),
                ),
                (
                    "location_description",
                    django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                        blank=True,
                        help_text="Street, landmarks near home, etc (Encryption: AES local)",
                        max_length=71,
                        null=True,
                    ),
                ),
                (
                    "stable",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        help_text="Refer to the SOP for the definition of 'stable'.",
                        max_length=15,
                        verbose_name="Do the facility health care staff consider the patient stable in care",
                    ),
                ),
                (
                    "last_appt_date",
                    models.DateField(
                        blank=True,
                        help_text="If known, the last appointment may help to estimate the next appointment or the expected frequency of routine appointments",
                        null=True,
                        verbose_name="When was the patient last seen at this health facility",
                    ),
                ),
                (
                    "next_appt_date",
                    models.DateField(
                        blank=True,
                        help_text="If known, this date will help prioritize efforts to contact the patient",
                        null=True,
                        verbose_name="Next scheduled routine appointment at this health facility",
                    ),
                ),
                (
                    "first_health_talk",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        max_length=15,
                        verbose_name="Attended general health talk",
                    ),
                ),
                (
                    "first_health_talk_date",
                    models.DateField(blank=True, null=True, verbose_name="General talk date"),
                ),
                (
                    "second_health_talk",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        max_length=15,
                        verbose_name="Attended sensitisation session",
                    ),
                ),
                (
                    "second_health_talk_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Sensitisation session date"
                    ),
                ),
                (
                    "call_attempts",
                    models.IntegerField(blank=True, default=0, help_text="auto-updated"),
                ),
                (
                    "willing_to_screen",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        max_length=15,
                        verbose_name="Has the patient agreed to be screened for the INTECOMM study",
                    ),
                ),
                (
                    "screening_refusal_reason_other",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                ("printed", models.BooleanField(default=False)),
                (
                    "conditions",
                    models.ManyToManyField(
                        to="intecomm_lists.conditions", verbose_name="Diagnoses"
                    ),
                ),
                (
                    "screening_refusal_reason",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="intecomm_lists.screeningrefusalreasons",
                        verbose_name="Reason subject unwilling to screen",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Log",
                "verbose_name_plural": "Patient Log",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
                "default_manager_name": "objects",
            },
            managers=[
                ("objects", intecomm_screening.models.patient_log.PatientLogManager()),
                ("on_site", edc_sites.model_mixins.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name="PatientLogReportPrintHistory",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("patient_log_identifier", models.CharField(max_length=36)),
                ("printed_datetime", models.DateTimeField(default=edc_utils.date.get_utcnow)),
                ("printed_user", models.CharField(max_length=25)),
            ],
            options={
                "verbose_name": "Patient Log Report Print History",
                "verbose_name_plural": "Patient Log Report Print History",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
                "default_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="PatientGroup",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("intecomm_group.patientgroup",),
            managers=[
                ("objects", intecomm_group.models.patient_group.PatientGroupManager()),
                ("on_site", edc_sites.model_mixins.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name="PatientGroupRando",
            fields=[],
            options={
                "verbose_name": "Patient group randomization",
                "verbose_name_plural": "Patient group randomization",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("intecomm_group.patientgroup",),
            managers=[
                ("objects", intecomm_group.models.patient_group.PatientGroupManager()),
                ("on_site", edc_sites.model_mixins.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name="Site",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("sites.site",),
            managers=[
                ("objects", django.contrib.sites.models.SiteManager()),
            ],
        ),
        migrations.CreateModel(
            name="SubjectScreening",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "legal_name",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure full name consists of letters only in upper case separated by single spaces",
                                regex="^(([A-Z]+ )*[A-Z]+)?$",
                            )
                        ],
                        verbose_name="Full name",
                    ),
                ),
                (
                    "familiar_name",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="Should be a name. Do NOT use MR, MRS, MISS, SIR, MADAM and other such titles. (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure name consists of letters only in upper case separated by single spaces",
                                regex="^(([A-Z]+ )*[A-Z]+)?$",
                            )
                        ],
                        verbose_name="By what NAME should we refer to you? (if we speak to you)",
                    ),
                ),
                ("subject_identifier", models.CharField(max_length=50)),
                (
                    "subject_identifier_as_pk",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "subject_identifier_aka",
                    models.CharField(
                        editable=False,
                        help_text="track a previously allocated identifier.",
                        max_length=50,
                        null=True,
                        verbose_name="Subject Identifier a.k.a",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                ("eligible", models.BooleanField(default=False)),
                (
                    "reasons_ineligible",
                    models.TextField(
                        max_length=150, null=True, verbose_name="Reason not eligible"
                    ),
                ),
                (
                    "eligibility_datetime",
                    models.DateTimeField(
                        help_text="Date and time eligibility was determined relative to report_datetime",
                        null=True,
                    ),
                ),
                (
                    "real_eligibility_datetime",
                    models.DateTimeField(
                        help_text="Date and time eligibility was determined relative to now",
                        null=True,
                    ),
                ),
                (
                    "reference",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Reference",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "initials",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="Use UPPERCASE letters only. May be 2 or 3 letters. (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                "[A-Z]{1,3}", "Invalid format"
                            ),
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.MaxLengthValidator(3),
                        ],
                    ),
                ),
                (
                    "gender",
                    models.CharField(choices=[("M", "Male"), ("F", "Female")], max_length=10),
                ),
                (
                    "age_in_years",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(110),
                        ]
                    ),
                ),
                (
                    "consent_ability",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Participant or legal guardian/representative able and willing to give informed consent.",
                    ),
                ),
                (
                    "unsuitable_for_study",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        help_text="If YES, patient NOT eligible, please give reason below.",
                        max_length=5,
                        verbose_name="Is there any other reason the patient is deemed to not be suitable for the study?",
                    ),
                ),
                (
                    "reasons_unsuitable",
                    models.TextField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="Reason not suitable for the study",
                    ),
                ),
                (
                    "unsuitable_agreed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=5,
                        verbose_name="Does the study coordinator agree that the patient is not suitable for the study?",
                    ),
                ),
                ("consented", models.BooleanField(default=False, editable=False)),
                ("refused", models.BooleanField(default=False, editable=False)),
                (
                    "sys_blood_pressure_one",
                    edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                        blank=True, null=True
                    ),
                ),
                (
                    "dia_blood_pressure_one",
                    edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                        blank=True, null=True
                    ),
                ),
                (
                    "sys_blood_pressure_two",
                    edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                        blank=True, null=True
                    ),
                ),
                (
                    "dia_blood_pressure_two",
                    edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                        blank=True, null=True
                    ),
                ),
                (
                    "sys_blood_pressure_avg",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Blood pressure: systolic (average)",
                    ),
                ),
                (
                    "dia_blood_pressure_avg",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Blood pressure: diastolic (average)",
                    ),
                ),
                (
                    "severe_htn",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Based on the above readings. Severe HTN is any BP reading > 180/110mmHg",
                        max_length=15,
                        null=True,
                        verbose_name="Does the patient have severe hypertension?",
                    ),
                ),
                (
                    "screening_identifier",
                    models.CharField(
                        blank=True, max_length=50, unique=True, verbose_name="Screening ID"
                    ),
                ),
                (
                    "patient_log_identifier",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Patient log identifier"
                    ),
                ),
                (
                    "selection_method",
                    models.CharField(
                        choices=[
                            ("random_sampling", "Random sampling"),
                            ("purposively_selected", "Purposively selected"),
                        ],
                        default="purposively_selected",
                        max_length=25,
                        verbose_name="How was the patient selected for screening?",
                    ),
                ),
                (
                    "hospital_identifier",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        unique=True,
                    ),
                ),
                (
                    "lives_nearby",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient live within the catchment population of the health facility",
                    ),
                ),
                (
                    "staying_nearby_6",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Is the patient planning to remain in this catchment area for at least 6 months",
                    ),
                ),
                (
                    "in_care_6m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="for 6m or more at the health facility from which they are being recruited",
                        max_length=15,
                        verbose_name="Has the patient been in regular care at this health facility for 6 months or more",
                    ),
                ),
                (
                    "in_care_duration",
                    edc_model.models.fields.duration.DurationYMDField(blank=True, null=True),
                ),
                (
                    "hiv_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient previously been diagnosed with HIV",
                    ),
                ),
                (
                    "hiv_dx_6m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Was the initial diagnosis made more than 6 months ago",
                    ),
                ),
                (
                    "hiv_dx_ago",
                    edc_model.models.fields.duration.DurationYMDField(blank=True, null=True),
                ),
                (
                    "art_unchanged_3m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        help_text="Meaning no modifications to the type of medication and dose for at least 3 months",
                        max_length=15,
                        verbose_name="Has the patient been on the same anti-retroviral therapy for at least 3 months",
                    ),
                ),
                (
                    "art_stable",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        help_text="considered by the clinical team not to have any complications/co-infections or that these are well managed.",
                        max_length=15,
                        verbose_name="Is the patient considered to be stable on treatment ",
                    ),
                ),
                (
                    "art_adherent",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        help_text="in regular attendance for care",
                        max_length=15,
                        verbose_name="Is the patient considered to be adherent to treatment over the last 6 months",
                    ),
                ),
                (
                    "dm_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient previously been diagnosed with Diabetes",
                    ),
                ),
                (
                    "dm_dx_6m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Was the initial diagnosis made more than 6 months ago",
                    ),
                ),
                (
                    "dm_dx_ago",
                    edc_model.models.fields.duration.DurationYMDField(blank=True, null=True),
                ),
                (
                    "dm_complications",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Does the patient suffer from any complications of diabetes that are unmanaged or uncontrolled.",
                    ),
                ),
                (
                    "htn_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient previously been diagnosed with Hypertension",
                    ),
                ),
                (
                    "htn_dx_6m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Was the initial diagnosis made more than 6 months ago",
                    ),
                ),
                (
                    "htn_dx_ago",
                    edc_model.models.fields.duration.DurationYMDField(blank=True, null=True),
                ),
                (
                    "htn_complications",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Does the patient suffer from any complications of hypertension that are unmanaged or uncontrolled.",
                    ),
                ),
                (
                    "excluded_by_bp_history",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient's blood pressure exceeded 180/110 mmHg on more than one occasion any time in the last 6 months.",
                    ),
                ),
                (
                    "excluded_by_gluc_history",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient's blood glucose exceeded 13 mmol/L any time in the last 6 months.",
                    ),
                ),
                (
                    "requires_acute_care",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have any clinical condition that requires health facility management",
                    ),
                ),
                (
                    "pregnant",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not Applicable: e.g. male or post-menopausal"),
                        ],
                        max_length=15,
                        verbose_name="Is the patient pregnant?",
                    ),
                ),
                (
                    "patient_log",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="intecomm_screening.patientlog",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="intecomm_screening.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Subject Screening",
                "verbose_name_plural": "Subject Screening",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
                "default_manager_name": "objects",
                "unique_together": {("legal_name", "initials")},
            },
            managers=[
                (
                    "objects",
                    edc_screening.model_mixins.screening_model_mixin.ScreeningManager(),
                ),
                ("on_site", edc_sites.model_mixins.CurrentSiteManager()),
            ],
        ),
        migrations.AddField(
            model_name="patientlog",
            name="site",
            field=models.ForeignKey(
                help_text="This question is asked to confirm you are logged in to the correct site.",
                on_delete=django.db.models.deletion.PROTECT,
                to="intecomm_screening.site",
                verbose_name="Which site is this?",
            ),
        ),
        migrations.CreateModel(
            name="PatientCall",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("report_datetime", models.DateTimeField(default=edc_utils.date.get_utcnow)),
                (
                    "contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        validators=[edc_model.validators.phone.phone_number],
                    ),
                ),
                (
                    "alt_contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[edc_model.validators.phone.phone_number],
                    ),
                ),
                (
                    "answered",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=15, null=True
                    ),
                ),
                (
                    "respondent",
                    models.CharField(
                        choices=[
                            ("patient", "Patient"),
                            ("family", "Family"),
                            ("friend", "friend"),
                            ("OTHER", "other"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                    ),
                ),
                (
                    "survival_status",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_sure", "Not sure"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="Is the participant known to be alive",
                    ),
                ),
                (
                    "catchment_area",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_sure", "Not sure"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="Does the participant still reside within the catchment area",
                    ),
                ),
                (
                    "last_appt_date",
                    models.DateField(
                        blank=True,
                        help_text="This may be helpful when updating health records",
                        null=True,
                        verbose_name="When did the patient last seek care",
                    ),
                ),
                (
                    "last_attend_clinic",
                    models.CharField(
                        blank=True,
                        help_text="This may be helpful when updating health records",
                        max_length=25,
                        null=True,
                        verbose_name="Where did the patient last seek care",
                    ),
                ),
                (
                    "last_attend_clinic_other",
                    edc_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "next_appt_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="When will the patient next attend"
                    ),
                ),
                (
                    "call_again",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="May we call again?",
                    ),
                ),
                (
                    "comment",
                    django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                        blank=True,
                        help_text=" (Encryption: AES local)",
                        max_length=71,
                        null=True,
                        verbose_name="Note",
                    ),
                ),
                (
                    "patient_log",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="intecomm_screening.patientlog",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient Call",
                "verbose_name_plural": "Patient Calls",
                "ordering": ["report_datetime"],
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
                "default_manager_name": "objects",
            },
            managers=[
                (
                    "objects",
                    intecomm_screening.model_mixins.patient_call_model_mixin.Manager(),
                ),
                ("on_site", edc_sites.model_mixins.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalSubjectScreening",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "legal_name",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure full name consists of letters only in upper case separated by single spaces",
                                regex="^(([A-Z]+ )*[A-Z]+)?$",
                            )
                        ],
                        verbose_name="Full name",
                    ),
                ),
                (
                    "familiar_name",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="Should be a name. Do NOT use MR, MRS, MISS, SIR, MADAM and other such titles. (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure name consists of letters only in upper case separated by single spaces",
                                regex="^(([A-Z]+ )*[A-Z]+)?$",
                            )
                        ],
                        verbose_name="By what NAME should we refer to you? (if we speak to you)",
                    ),
                ),
                ("subject_identifier", models.CharField(max_length=50)),
                (
                    "subject_identifier_as_pk",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "subject_identifier_aka",
                    models.CharField(
                        editable=False,
                        help_text="track a previously allocated identifier.",
                        max_length=50,
                        null=True,
                        verbose_name="Subject Identifier a.k.a",
                    ),
                ),
                (
                    "slug",
                    models.CharField(
                        db_index=True,
                        default="",
                        editable=False,
                        help_text="a field used for quick search",
                        max_length=250,
                        null=True,
                    ),
                ),
                ("eligible", models.BooleanField(default=False)),
                (
                    "reasons_ineligible",
                    models.TextField(
                        max_length=150, null=True, verbose_name="Reason not eligible"
                    ),
                ),
                (
                    "eligibility_datetime",
                    models.DateTimeField(
                        help_text="Date and time eligibility was determined relative to report_datetime",
                        null=True,
                    ),
                ),
                (
                    "real_eligibility_datetime",
                    models.DateTimeField(
                        help_text="Date and time eligibility was determined relative to now",
                        null=True,
                    ),
                ),
                (
                    "reference",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        verbose_name="Reference",
                    ),
                ),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow,
                        help_text="Date and time of report.",
                        verbose_name="Report Date and Time",
                    ),
                ),
                (
                    "initials",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="Use UPPERCASE letters only. May be 2 or 3 letters. (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                "[A-Z]{1,3}", "Invalid format"
                            ),
                            django.core.validators.MinLengthValidator(2),
                            django.core.validators.MaxLengthValidator(3),
                        ],
                    ),
                ),
                (
                    "gender",
                    models.CharField(choices=[("M", "Male"), ("F", "Female")], max_length=10),
                ),
                (
                    "age_in_years",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(110),
                        ]
                    ),
                ),
                (
                    "consent_ability",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=25,
                        verbose_name="Participant or legal guardian/representative able and willing to give informed consent.",
                    ),
                ),
                (
                    "unsuitable_for_study",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        default="No",
                        help_text="If YES, patient NOT eligible, please give reason below.",
                        max_length=5,
                        verbose_name="Is there any other reason the patient is deemed to not be suitable for the study?",
                    ),
                ),
                (
                    "reasons_unsuitable",
                    models.TextField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="Reason not suitable for the study",
                    ),
                ),
                (
                    "unsuitable_agreed",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=5,
                        verbose_name="Does the study coordinator agree that the patient is not suitable for the study?",
                    ),
                ),
                ("consented", models.BooleanField(default=False, editable=False)),
                ("refused", models.BooleanField(default=False, editable=False)),
                (
                    "sys_blood_pressure_one",
                    edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                        blank=True, null=True
                    ),
                ),
                (
                    "dia_blood_pressure_one",
                    edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                        blank=True, null=True
                    ),
                ),
                (
                    "sys_blood_pressure_two",
                    edc_vitals.models.fields.blood_pressure.SystolicPressureField(
                        blank=True, null=True
                    ),
                ),
                (
                    "dia_blood_pressure_two",
                    edc_vitals.models.fields.blood_pressure.DiastolicPressureField(
                        blank=True, null=True
                    ),
                ),
                (
                    "sys_blood_pressure_avg",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Blood pressure: systolic (average)",
                    ),
                ),
                (
                    "dia_blood_pressure_avg",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Blood pressure: diastolic (average)",
                    ),
                ),
                (
                    "severe_htn",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="Based on the above readings. Severe HTN is any BP reading > 180/110mmHg",
                        max_length=15,
                        null=True,
                        verbose_name="Does the patient have severe hypertension?",
                    ),
                ),
                (
                    "screening_identifier",
                    models.CharField(
                        blank=True, db_index=True, max_length=50, verbose_name="Screening ID"
                    ),
                ),
                (
                    "patient_log_identifier",
                    models.CharField(
                        db_index=True, max_length=50, verbose_name="Patient log identifier"
                    ),
                ),
                (
                    "selection_method",
                    models.CharField(
                        choices=[
                            ("random_sampling", "Random sampling"),
                            ("purposively_selected", "Purposively selected"),
                        ],
                        default="purposively_selected",
                        max_length=25,
                        verbose_name="How was the patient selected for screening?",
                    ),
                ),
                (
                    "hospital_identifier",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        db_index=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                    ),
                ),
                (
                    "lives_nearby",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient live within the catchment population of the health facility",
                    ),
                ),
                (
                    "staying_nearby_6",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Is the patient planning to remain in this catchment area for at least 6 months",
                    ),
                ),
                (
                    "in_care_6m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        help_text="for 6m or more at the health facility from which they are being recruited",
                        max_length=15,
                        verbose_name="Has the patient been in regular care at this health facility for 6 months or more",
                    ),
                ),
                (
                    "in_care_duration",
                    edc_model.models.fields.duration.DurationYMDField(blank=True, null=True),
                ),
                (
                    "hiv_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient previously been diagnosed with HIV",
                    ),
                ),
                (
                    "hiv_dx_6m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Was the initial diagnosis made more than 6 months ago",
                    ),
                ),
                (
                    "hiv_dx_ago",
                    edc_model.models.fields.duration.DurationYMDField(blank=True, null=True),
                ),
                (
                    "art_unchanged_3m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        help_text="Meaning no modifications to the type of medication and dose for at least 3 months",
                        max_length=15,
                        verbose_name="Has the patient been on the same anti-retroviral therapy for at least 3 months",
                    ),
                ),
                (
                    "art_stable",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        help_text="considered by the clinical team not to have any complications/co-infections or that these are well managed.",
                        max_length=15,
                        verbose_name="Is the patient considered to be stable on treatment ",
                    ),
                ),
                (
                    "art_adherent",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        help_text="in regular attendance for care",
                        max_length=15,
                        verbose_name="Is the patient considered to be adherent to treatment over the last 6 months",
                    ),
                ),
                (
                    "dm_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient previously been diagnosed with Diabetes",
                    ),
                ),
                (
                    "dm_dx_6m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Was the initial diagnosis made more than 6 months ago",
                    ),
                ),
                (
                    "dm_dx_ago",
                    edc_model.models.fields.duration.DurationYMDField(blank=True, null=True),
                ),
                (
                    "dm_complications",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Does the patient suffer from any complications of diabetes that are unmanaged or uncontrolled.",
                    ),
                ),
                (
                    "htn_dx",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient previously been diagnosed with Hypertension",
                    ),
                ),
                (
                    "htn_dx_6m",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Was the initial diagnosis made more than 6 months ago",
                    ),
                ),
                (
                    "htn_dx_ago",
                    edc_model.models.fields.duration.DurationYMDField(blank=True, null=True),
                ),
                (
                    "htn_complications",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("N/A", "Not applicable")],
                        default="N/A",
                        max_length=15,
                        verbose_name="Does the patient suffer from any complications of hypertension that are unmanaged or uncontrolled.",
                    ),
                ),
                (
                    "excluded_by_bp_history",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient's blood pressure exceeded 180/110 mmHg on more than one occasion any time in the last 6 months.",
                    ),
                ),
                (
                    "excluded_by_gluc_history",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Has the patient's blood glucose exceeded 13 mmol/L any time in the last 6 months.",
                    ),
                ),
                (
                    "requires_acute_care",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="Does the patient have any clinical condition that requires health facility management",
                    ),
                ),
                (
                    "pregnant",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("N/A", "Not Applicable: e.g. male or post-menopausal"),
                        ],
                        max_length=15,
                        verbose_name="Is the patient pregnant?",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient_log",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_screening.patientlog",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_screening.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Subject Screening",
                "verbose_name_plural": "historical Subject Screening",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPatientLog",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                (
                    "legal_name",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure full name consists of letters only in upper case separated by single spaces",
                                regex="^(([A-Z]+ )*[A-Z]+)?$",
                            )
                        ],
                        verbose_name="Full name",
                    ),
                ),
                (
                    "familiar_name",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="Should be a name. Do NOT use MR, MRS, MISS, SIR, MADAM and other such titles. (Encryption: RSA local)",
                        max_length=71,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ensure name consists of letters only in upper case separated by single spaces",
                                regex="^(([A-Z]+ )*[A-Z]+)?$",
                            )
                        ],
                        verbose_name="By what NAME should we refer to you? (if we speak to you)",
                    ),
                ),
                (
                    "filing_identifier",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Auto-populated when form is saved. <BR>This is a sequential-like identifier to label this patient's paper file",
                        max_length=36,
                        verbose_name="Filing number",
                    ),
                ),
                (
                    "patient_log_identifier",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Auto-populated when form is saved. <BR>You may prefer to use the FILING NUMBER. <BR>This identifier is replaced by the 'screening identifier' if the patient screens for the INTECOMM trial",
                        max_length=36,
                        verbose_name="Patient Log Reference",
                    ),
                ),
                (
                    "screening_identifier",
                    models.CharField(
                        db_index=True,
                        default=edc_utils.get_uuid,
                        help_text="Auto populated when screening form is complete",
                        max_length=36,
                    ),
                ),
                (
                    "screening_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Auto populated when screening form is complete",
                        null=True,
                    ),
                ),
                (
                    "subject_identifier",
                    models.CharField(
                        db_index=True,
                        default=edc_utils.get_uuid,
                        help_text="Auto populated when consent form is complete",
                        max_length=36,
                    ),
                ),
                (
                    "consent_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Auto populated when consent form is complete",
                        null=True,
                    ),
                ),
                (
                    "group_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Auto populated when group is randomized",
                        max_length=25,
                        null=True,
                    ),
                ),
                (
                    "initials",
                    edc_model_fields.fields.initials_field.InitialsField(
                        help_text="Type 2-3 letters, all in uppercase and no spaces",
                        max_length=3,
                        verbose_name="Initials",
                    ),
                ),
                (
                    "gender",
                    models.CharField(choices=[("M", "Male"), ("F", "Female")], max_length=10),
                ),
                (
                    "age_in_years",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(18),
                            django.core.validators.MaxValueValidator(110),
                        ],
                        verbose_name="Age",
                    ),
                ),
                ("report_datetime", models.DateTimeField(default=edc_utils.date.get_utcnow)),
                (
                    "hospital_identifier",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        db_index=True,
                        help_text="Must be unique (Encryption: RSA local)",
                        max_length=71,
                        verbose_name="Hospital identifier",
                    ),
                ),
                (
                    "last_4_hospital_identifier",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        editable=False,
                        help_text="auto-populated (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        verbose_name="Last 4 digits of hospital_identifier",
                    ),
                ),
                (
                    "contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text="If unknown, type 'UNKNOWN' (Encryption: RSA local)",
                        max_length=71,
                        validators=[edc_model.validators.phone.phone_number],
                    ),
                ),
                (
                    "alt_contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[edc_model.validators.phone.phone_number],
                    ),
                ),
                (
                    "last_4_contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        editable=False,
                        help_text="auto-populated (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        verbose_name="Last 4 digits of contact number",
                    ),
                ),
                (
                    "may_contact",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        max_length=15,
                        verbose_name="Has the patient agreed to be contacted prior to consent?",
                    ),
                ),
                (
                    "location_description",
                    django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                        blank=True,
                        help_text="Street, landmarks near home, etc (Encryption: AES local)",
                        max_length=71,
                        null=True,
                    ),
                ),
                (
                    "stable",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        help_text="Refer to the SOP for the definition of 'stable'.",
                        max_length=15,
                        verbose_name="Do the facility health care staff consider the patient stable in care",
                    ),
                ),
                (
                    "last_appt_date",
                    models.DateField(
                        blank=True,
                        help_text="If known, the last appointment may help to estimate the next appointment or the expected frequency of routine appointments",
                        null=True,
                        verbose_name="When was the patient last seen at this health facility",
                    ),
                ),
                (
                    "next_appt_date",
                    models.DateField(
                        blank=True,
                        help_text="If known, this date will help prioritize efforts to contact the patient",
                        null=True,
                        verbose_name="Next scheduled routine appointment at this health facility",
                    ),
                ),
                (
                    "first_health_talk",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        max_length=15,
                        verbose_name="Attended general health talk",
                    ),
                ),
                (
                    "first_health_talk_date",
                    models.DateField(blank=True, null=True, verbose_name="General talk date"),
                ),
                (
                    "second_health_talk",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        max_length=15,
                        verbose_name="Attended sensitisation session",
                    ),
                ),
                (
                    "second_health_talk_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Sensitisation session date"
                    ),
                ),
                (
                    "call_attempts",
                    models.IntegerField(blank=True, default=0, help_text="auto-updated"),
                ),
                (
                    "willing_to_screen",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No"), ("tbd", "To be determined")],
                        default="tbd",
                        max_length=15,
                        verbose_name="Has the patient agreed to be screened for the INTECOMM study",
                    ),
                ),
                (
                    "screening_refusal_reason_other",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                ("printed", models.BooleanField(default=False)),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "screening_refusal_reason",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_lists.screeningrefusalreasons",
                        verbose_name="Reason subject unwilling to screen",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="This question is asked to confirm you are logged in to the correct site.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_screening.site",
                        verbose_name="Which site is this?",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Patient Log",
                "verbose_name_plural": "historical Patient Log",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPatientCall",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("report_datetime", models.DateTimeField(default=edc_utils.date.get_utcnow)),
                (
                    "contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        validators=[edc_model.validators.phone.phone_number],
                    ),
                ),
                (
                    "alt_contact_number",
                    django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(
                        blank=True,
                        help_text=" (Encryption: RSA local)",
                        max_length=71,
                        null=True,
                        validators=[edc_model.validators.phone.phone_number],
                    ),
                ),
                (
                    "answered",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")], max_length=15, null=True
                    ),
                ),
                (
                    "respondent",
                    models.CharField(
                        choices=[
                            ("patient", "Patient"),
                            ("family", "Family"),
                            ("friend", "friend"),
                            ("OTHER", "other"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                    ),
                ),
                (
                    "survival_status",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_sure", "Not sure"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="Is the participant known to be alive",
                    ),
                ),
                (
                    "catchment_area",
                    models.CharField(
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("not_sure", "Not sure"),
                            ("N/A", "Not applicable"),
                        ],
                        default="N/A",
                        max_length=15,
                        verbose_name="Does the participant still reside within the catchment area",
                    ),
                ),
                (
                    "last_appt_date",
                    models.DateField(
                        blank=True,
                        help_text="This may be helpful when updating health records",
                        null=True,
                        verbose_name="When did the patient last seek care",
                    ),
                ),
                (
                    "last_attend_clinic",
                    models.CharField(
                        blank=True,
                        help_text="This may be helpful when updating health records",
                        max_length=25,
                        null=True,
                        verbose_name="Where did the patient last seek care",
                    ),
                ),
                (
                    "last_attend_clinic_other",
                    edc_model.models.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "next_appt_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="When will the patient next attend"
                    ),
                ),
                (
                    "call_again",
                    models.CharField(
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=15,
                        verbose_name="May we call again?",
                    ),
                ),
                (
                    "comment",
                    django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(
                        blank=True,
                        help_text=" (Encryption: AES local)",
                        max_length=71,
                        null=True,
                        verbose_name="Note",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient_log",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_screening.patientlog",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Patient Call",
                "verbose_name_plural": "historical Patient Calls",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalHealthTalkLog",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("old_health_facility", models.CharField(max_length=100, null=True)),
                (
                    "health_talk_type_other",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                ("report_date", models.DateField()),
                (
                    "number_attended",
                    models.IntegerField(verbose_name="Approximate number attended"),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "health_facility",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_facility.healthfacility",
                        verbose_name="Health facility",
                    ),
                ),
                (
                    "health_talk_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_lists.healthtalktypes",
                        verbose_name="Type of talk",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Health talk log",
                "verbose_name_plural": "historical Health talk logs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalConsentRefusal",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                    ),
                ),
                ("screening_identifier", models.CharField(db_index=True, max_length=36)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow, verbose_name="Report date and time"
                    ),
                ),
                (
                    "other_reason",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reason",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        max_length=25,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_lists.consentrefusalreasons",
                        verbose_name="Reason for refusal to consent",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_screening",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="intecomm_screening.subjectscreening",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Consent Refusal",
                "verbose_name_plural": "historical Consent Refusals",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ConsentRefusal",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("screening_identifier", models.CharField(max_length=36, unique=True)),
                (
                    "report_datetime",
                    models.DateTimeField(
                        default=edc_utils.date.get_utcnow, verbose_name="Report date and time"
                    ),
                ),
                (
                    "other_reason",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                (
                    "reason",
                    models.ForeignKey(
                        max_length=25,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="intecomm_lists.consentrefusalreasons",
                        verbose_name="Reason for refusal to consent",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
                (
                    "subject_screening",
                    models.OneToOneField(
                        blank=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="intecomm_screening.subjectscreening",
                    ),
                ),
            ],
            options={
                "verbose_name": "Consent Refusal",
                "verbose_name_plural": "Consent Refusals",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
                "default_manager_name": "objects",
            },
            managers=[
                ("on_site", edc_sites.model_mixins.CurrentSiteManager()),
                ("objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterUniqueTogether(
            name="patientlog",
            unique_together={("legal_name", "initials")},
        ),
        migrations.CreateModel(
            name="HealthTalkLog",
            fields=[
                (
                    "revision",
                    django_revision.revision_field.RevisionField(
                        blank=True,
                        editable=False,
                        help_text="System field. Git repository tag:branch:commit.",
                        max_length=75,
                        null=True,
                        verbose_name="Revision",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "modified",
                    models.DateTimeField(
                        blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow
                    ),
                ),
                (
                    "user_created",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user created",
                    ),
                ),
                (
                    "user_modified",
                    django_audit_fields.fields.userfield.UserField(
                        blank=True,
                        help_text="Updated by admin.save_model",
                        max_length=50,
                        verbose_name="user modified",
                    ),
                ),
                (
                    "hostname_created",
                    models.CharField(
                        blank=True,
                        default=_socket.gethostname,
                        help_text="System field. (modified on create only)",
                        max_length=60,
                    ),
                ),
                (
                    "hostname_modified",
                    django_audit_fields.fields.hostname_modification_field.HostnameModificationField(
                        blank=True,
                        help_text="System field. (modified on every save)",
                        max_length=50,
                    ),
                ),
                ("device_created", models.CharField(blank=True, max_length=10)),
                ("device_modified", models.CharField(blank=True, max_length=10)),
                (
                    "id",
                    django_audit_fields.fields.uuid_auto_field.UUIDAutoField(
                        blank=True,
                        editable=False,
                        help_text="System auto field. UUID primary key.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("old_health_facility", models.CharField(max_length=100, null=True)),
                (
                    "health_talk_type_other",
                    edc_model_fields.fields.other_charfield.OtherCharField(
                        blank=True,
                        max_length=35,
                        null=True,
                        verbose_name="If other, please specify ...",
                    ),
                ),
                ("report_date", models.DateField()),
                (
                    "number_attended",
                    models.IntegerField(verbose_name="Approximate number attended"),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "health_facility",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="intecomm_facility.healthfacility",
                        verbose_name="Health facility",
                    ),
                ),
                (
                    "health_talk_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="intecomm_lists.healthtalktypes",
                        verbose_name="Type of talk",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="sites.site",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health talk log",
                "verbose_name_plural": "Health talk logs",
                "ordering": ("-modified", "-created"),
                "get_latest_by": "modified",
                "abstract": False,
                "default_permissions": ("add", "change", "delete", "view", "export", "import"),
                "default_manager_name": "objects",
                "unique_together": {("health_facility", "report_date")},
            },
            managers=[
                ("objects", intecomm_screening.models.health_talk_log.Manager()),
                ("on_site", edc_sites.model_mixins.CurrentSiteManager()),
            ],
        ),
    ]
